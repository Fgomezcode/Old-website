var roundOneInfo = document.getElementById("roundOneParameters");
var roundTwoInfo = document.getElementById("roundTwoParameters");

var timerDisplay = document.getElementById("remainingTime");

var roundOneButton = "roundOneButton";
var roundTwoButton = "roundTwoButton";
var generateButton = "generateButton";

var roundOneTimerDisplay = "RoundOneTimer";
var roundTwoTimerDisplay = "RoundTwoTimer";

var ParameterDisplay = "ParameterDisplay";
var ResetDisplay = "ResetDisplay";
var GenerateDisplay = "GenerateDisplay";

var roundOneDiv = "RoundOneDiv";
var roundTwoDiv = "RoundTwoDiv";

var roundOneTimerHeader = "RoundOneTimerHeader";
var roundTwoTimerHeader = "RoundTwoTimerHeader";

let roundTimes = [11100, 7200];

// assigned the values generated by the generateParameters() function.

var parameters;

//MATERIAL LISTS --------------------------------
const plainStyles = [
  "High Carbon Steel",
  "Mid Range Steel",
  "Mild Steel",
  "Dealers Choice",
];

const damascusStyles = [
  "Canister Damascus",
  "Ladder Damascus",
  "Rain Drop Damascus",
  "Twist Damascus",
  "100 Layer (Minimum) Damascus",
  "64 Layer Damascus",
  "200 Layer (Minimum) Damascus",
];

const foldStyles = ["San Mai", "Go Mai"];

const tangStyle = ["Hidden Tang", "Full Tang"];

const styles = [plainStyles, damascusStyles, foldStyles]; // declare various arrays with materials styles and tangs etc.
const handleMaterials = [
  "Natural Woods",
  "Animal Horn",
  "Acrylic",
  "Micarta",
  "G-10",
  "Paracord",
  "Dealers Choice",
];
//-----------------------------------------------

//call all generate functions to make parameters object
function generateParameters() {
  parameters = generateRoundOneParameters(styles, tangStyle, handleMaterials);

  roundOneInfo.innerHTML = `<p class="RoundPrompt">The button below will display the parameters for the first round.<br><strong>THE CLOCK WILL NOT STOP ONCE YOU START </strong>.</p> <p class="RoundPrompt"> You will have <strong>3 hours</strong> to complete your work.</p>
                              <p class="RoundPrompt"><strong>YOU ARE GIVEN AN ADDITIONAL 5 MINUTES TO READ THE PARAMETERS AND PREPARE YOUR WORKSTATION.</strong></p>
                              <p class="RoundPrompt">Goodluck!</p>`;

  roundTwoInfo.innerHTML = `<p class="RoundPrompt">In this next round you will add handles to your blades, making them fully functioning weapons. You will have <strong>2 HOURS</stong> to complete your work.</p>
                              <p class="RoundPrompt"><strong>YOU ARE GIVEN AN ADDITIONAL 5 MINUTES TO READ THE PARAMETERS AND PREPARE YOUR WORKSTATION.</strong></p>
                             `;

  //call generate information to display the glossary
  generateInformation();

  //hide the generate button
  hideDiv(GenerateDisplay);

  //show the parameter display but also hide the round2 display
  showDiv(ParameterDisplay);
  hideDiv(roundTwoDiv);
  hideDiv(roundOneTimerDisplay);
  //show the reset button
  showDiv(ResetDisplay);
}

//ROUND ONE SETUP

//update the content on page to display the generated parameters
function displayRoundOne() {
  var roundOneDisplay = `<p class="RoundPrompt">Make a knife in your signature style that meets the following parameters:</p>

                    <ul id = "roundParams">

                        <li>Blade length: <strong> ${parseInt(
                          parameters.lengthChoice - 2
                        )} - <strong> ${
    parameters.lengthChoice
  }</strong> inches</strong>
                        </li>

                        <li>Material/Technique:<strong>  ${
                          parameters.styleChoice
                        } </strong>
                        </li>

                        <li>Tang Style: <strong> ${
                          parameters.tangChoice
                        } .</strong>
                        </li>
                    </ul>
                    `;
  roundOneInfo.innerHTML = roundOneDisplay + parameters.roundOneExtras;
  console.log(roundTimes[0]);

  //CHANGE THIS TO -> r1Seconds = roundOneTime;-----
  r1Seconds = 1;
  // -------------------------------------------

  roundOneCountdownTimer = setInterval("roundOneTimer()", 1000);
  hideDiv(roundOneButton);
  hideDiv("skipButton")
  showDiv(roundOneTimerDisplay);
}

// ROUND ONE TIMER
var roundOneTime = roundTimes[0];
var r1Seconds = roundOneTime;

var roundOneCountdownTimer;
function roundOneTimer() {
  var days = Math.floor(r1Seconds / 24 / 60 / 60);
  var hoursLeft = Math.floor(r1Seconds - days * 86400);
  var hours = Math.floor(hoursLeft / 3600);
  var minutesLeft = Math.floor(hoursLeft - hours * 3600);
  var minutes = Math.floor(minutesLeft / 60);
  var remainingSeconds = r1Seconds % 60;

  function pad(n) {
    return n < 10 ? "0" + n : n;
  }

  document.getElementById("RoundOneTimer").innerHTML =
    pad(hours) + ":" + pad(minutes) + ":" + pad(remainingSeconds);

  if (r1Seconds <= 0) {
    clearInterval(roundOneCountdownTimer);
    document.getElementById("RoundOneTimer").innerHTML =
      "REMAINING TIME: 00:00:00";

    // hide and display information for round 2
    showDiv(roundTwoDiv);
    hideDiv(roundTwoTimerDisplay);
    hideDiv(roundOneTimerDisplay);
  } else {
    r1Seconds--;
  }
}

// ROUND 2 SETUP
var roundTwoTime = roundTimes[1];
var r2Seconds = roundTwoTime;

function roundTwoTimer() {
  var days = Math.floor(r2Seconds / 24 / 60 / 60);
  var hoursLeft = Math.floor(r2Seconds - days * 86400);
  var hours = Math.floor(hoursLeft / 3600);
  var minutesLeft = Math.floor(hoursLeft - hours * 3600);
  var minutes = Math.floor(minutesLeft / 60);
  var remainingSeconds = r2Seconds % 60;
  function pad(n) {
    return n < 10 ? "0" + n : n;
  }
  document.getElementById("RoundTwoTimer").innerHTML =
    pad(hours) + ":" + pad(minutes) + ":" + pad(remainingSeconds);

  if (r2Seconds == 0) {
    clearInterval(roundOneCountdownTimer);
    document.getElementById("RoundTwoTimer").innerHTML = "TIME'S UP.";
  } else {
    r2Seconds--;
  }
}

var roundTwoCountdownTimer;

//update the content on page to display the generated parameters
function displayRoundTwo() {
  var roundTwoDisplay = `<p class="RoundPrompt" >Your handle must be composed of <strong> ${parameters.materialChoice} </strong> and must be compatible with <strong> ${parameters.tangChoice}</strong> construction.</p>`;
  roundTwoInfo.innerHTML = roundTwoDisplay + parameters.roundTwoExtras;

  //CHANGE THIS TO -> r2Seconds = roundTwoTime;---
  r2Seconds = 1;
  // -------------------------------------------

  roundTwoCountdownTimer = setInterval("roundTwoTimer()", 1000);

  //hide and display information
  hideDiv(roundTwoButton);
  showDiv(roundTwoTimerDisplay);
}

//RESET AND SKIP FUNCTIONS
function resetPage() {
  location.reload();
}

function skipTimers() {
  var roundOneDisplay = `<p class="RoundPrompt">Make a knife in your signature style that meets the following parameters:</p>

    <ul id = "roundParams">

        <li>Blade length: <strong> ${parseInt(
          parameters.lengthChoice - 2
        )} - <strong> ${parameters.lengthChoice}</strong> inches</strong>
        </li>

        <li>Material/Technique:<strong>  ${parameters.styleChoice} </strong>
        </li>

        <li>Tang Style: <strong> ${parameters.tangChoice} .</strong>
        </li>
    </ul>
    `;

  var roundTwoDisplay = `<p class="RoundPrompt" >Your handle must be composed of <strong> ${parameters.materialChoice} </strong> and must be compatible with <strong> ${parameters.tangChoice}</strong> construction.</p>`;

  roundOneInfo.innerHTML =
    roundOneDisplay +
    parameters.roundOneExtras +
    roundTwoDisplay +
    parameters.roundTwoExtras;
  document.getElementById("roundOneButton").hidden = true;
  hideDiv("skipButton");
}

//Generate round one parameters
function generateRoundOneParameters(styles, tangStyle, handleMaterials) {
  // declare various arrays with materials styles and tangs etc.

  //generate random ints
  const styleMainRoll = getRandomInt(0, styles.length);
  const styleSubRoll = getRandomInt(0, styles[styleMainRoll].length);
  const bladelength = getRandomInt(9, 16);
  // select and assign the style locally
  var styleSelection = styles[styleMainRoll][styleSubRoll];

  //randomly select the handle material
  var materialSelection =
    handleMaterials[getRandomInt(0, handleMaterials.length)];

  //randomly select the tang style
  var tangSelection = tangStyle[getRandomInt(0, tangStyle.length)];

  return {
    lengthChoice: bladelength,
    tangChoice: tangSelection,
    styleChoice: styleSelection,
    materialChoice: materialSelection,
    roundOneExtras: generateExtrasRoundOne(),
    roundTwoExtras: generateExtrasRoundTwo(),
  };
}

// outside of the main function for clarity
function generateExtrasRoundOne() {
  var choilRequired = false;
  var ricassoRequired = false;
  var fullerRequired = false;
  var sawbackRequired = false;

  var extras = `<p class="RoundPrompt">Aside from the matrials and techniques listed above, your blade must also include a(n):</p>  <ul id="roundOneExtras"> <li>`;

  var noExtras = `<p class="RoundPrompt">Your blade does not require additional parameters.</p>`;

  if (getRandomInt(1, 101) / 100 > 0.25) {
    choilRequired = true;
    extras += "  <strong> choil </strong> ";
  }
  if (getRandomInt(1, 101) / 100 > 0.25) {
    ricassoRequired = true;
    extras += " <strong> ricasso </strong> ";
  }
  if (getRandomInt(1, 101) / 100 > 0.25) {
    fullerRequired = true;
    extras += "<strong> fuller </strong> ";
  }
  if (getRandomInt(1, 101) / 100 > 0.25) {
    sawbackRequired = true;
    extras += " <strong> sawback </strong>";
  }

  if (choilRequired || ricassoRequired || fullerRequired) {
    return extras + "  </li></ul>";
  } else {
    return noExtras;
  }
}

//outside of the main function for clarity
function generateExtrasRoundTwo() {
  var guardRequired = false;
  var pommelRequired = false;
  var bolsterRequired = false;

  var extras = `<p class="RoundPrompt">Aside from the handle parameters set above, your handle must include a(n):</p>  <ul id="roundOneExtras"><li>`;
  var noExtras = `<p class="RoundPrompt">Your handle does not require additional parameters.</p>`;

  if (getRandomInt(1, 101) / 100 > 0.25) {
    guardRequired = true;
    extras += " <strong>guard</strong> ";
  }
  if (getRandomInt(1, 101) / 100 > 0.25) {
    pommelRequired = true;
    extras += " <strong>pommel</strong> ";
  }
  if (getRandomInt(1, 101) / 100 > 0.25) {
    bolsterRequired = true;
    extras += "<strong> bolster </strong>";
  }

  if (guardRequired || pommelRequired || bolsterRequired) {
    return extras + "</ul>";
  }
  return noExtras;
}

//get a random INT - min is inclusive max is exclusive
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min) + min);
}

function showDiv(hideThis) {
  document.getElementById(hideThis).hidden = false;
}
function hideDiv(hideThis) {
  document.getElementById(hideThis).hidden = true;
}
//hide divs on load
window.onload = function () {
  hideDiv(ParameterDisplay);
  hideDiv(ResetDisplay);
};

//generate search table for techniques
function generateInformation() {
  let newHTML = "";
  const div = document.createElement("table");

  //create and append new div

  let counter = 0;
  for (i = 0; i < handleMaterials.length; i++) {
    if (handleMaterials[i] == "Dealers Choice") {
      continue;
    }
    newHTML += `<td class="GlossaryCell"><a href="https://www.google.com/search?q=${handleMaterials[i]} Knife Making" target="blank">${handleMaterials[i]}</a></td>`;
    counter++;
    if (counter > 5) {
      newHTML += `<tr ></tr>`;
      counter = 0;
    }
  }

  newHTML += `<tr></tr>`;

  counter = 0;

  for (i = 0; i < styles.length; i++) {
    for (j = 0; j < styles[i].length; j++) {
      if (styles[i][j] == "Dealers Choice") {
        continue;
      }
      newHTML += `<td class="GlossaryCell"><a href="https://www.google.com/search?q=${styles[i][j]} Knife Making" target="blank">${styles[i][j]}</a></td>`;
      counter++;

      if (counter > 5) {
        newHTML += `<tr ></tr>`;
        counter = 0;
      }
    }
  }

  div.id = "GlossaryTable";
  div.innerHTML = `
                     <tr class="GlossaryRow">
                     ${newHTML}
                     </tr>
                     `;

  document.getElementById("TableDiv").appendChild(div);
}